@using Application.Auth.Commands

<div class="flex flex-row justify-around p-4 border-2 rounded-md backdrop-blur-[2px]
            text-black dark:text-white">
    <EditForm Model="Command" OnValidSubmit="LoginAsync" novalidate>
        <DataAnnotationsValidator/>
        <FluentValidationValidator/>

        <div class="flex flex-col text-start mb-2">
            <label for="username" class="font-semibold">
                Username
            </label>

            <InputText
                @bind-Value="Command.Username"
                class="peer bg-transparent rounded-md border-2 border-black dark:border-white p-1"
                id="username"
                type="text"
                autocomplete="username"
                required autofocus/>

            <div class="hidden peer-[.invalid]:block text-red-700 dark:text-red-300 font-bold">
                <ValidationMessage For="@(() => Command.Username)"/>
            </div>
        </div>

        @* <div class="text-start mb-3"> *@
        @*     <label for="password" class="form-label fw-bolder text-bg-white mb-0"> *@
        @*         Password *@
        @*     </label> *@
        @*     <InputText *@
        @*         @bind-Value="Command.Password" *@
        @*         class="form-control bg-white text-black" *@
        @*         id="password" *@
        @*         type="password" *@
        @*         autocomplete="current-password" *@
        @*         required autofocus/> *@
        @*     <div class="invalid-feedback fw-bold"> *@
        @*         <ValidationMessage For="@(() => Command.Password)"/> *@
        @*     </div> *@
        @*     <div class="form-text"> *@
        @*         <a class="text-warning small" href="#" @onclick="@ChangeAuthStateToRecoverAsync"> *@
        @*             Forgot your password? *@
        @*         </a> *@
        @*     </div> *@
        @* </div> *@

        <div class="text-center mb-3">
            <button type="submit" class="p-2 bg-green-500 w-full rounded-md">
                Login
            </button>
        </div>

        <div class="text-start">
            <div class="col-auto px-0" aria-label="register">
                Don't have an account?
                <a class="underline text-blue-500" href="#" @onclick="@ChangeAuthStateToRegisterAsync">
                    Register
                </a>
            </div>
        </div>
    </EditForm>

    <div class="mx-4"></div>

    <div class="col-4 d-none d-lg-flex m-1">
        <div class="d-flex flex-column justify-content-center align-items-center w-100 h-100">
            <div class="mb-2">
                <img src="https://api.qrserver.com/v1/create-qr-code/?qzone=1&data=https://youtu.be/dQw4w9WgXcQ"
                     alt="scan to login"
                     width="200"
                     height="200"
                     class="rounded-md" />
            </div>

            <div class="font-semibold text-xl">
                Log in with QR Code
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<AuthModalState> ChangeAuthState { get; set; }

    public UserLoginCommand Command { get; } = new(string.Empty, string.Empty);

    private async Task ChangeAuthStateToRegisterAsync()
    {
        await ChangeAuthState.InvokeAsync(AuthModalState.Register);
    }

    private async Task ChangeAuthStateToRecoverAsync()
    {
        await ChangeAuthState.InvokeAsync(AuthModalState.Recover);
    }

    private void LoginAsync()
    {
        Console.WriteLine("submit");
    }
}